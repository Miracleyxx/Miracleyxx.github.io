{
    "version": "https://jsonfeed.org/version/1",
    "title": "顾茫然",
    "subtitle": "顾茫然的博客",
    "icon": "https://miracleyxx.github.io/images/favicon.ico",
    "description": "顾茫然的描述",
    "home_page_url": "https://miracleyxx.github.io",
    "items": [
        {
            "id": "https://miracleyxx.github.io/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E5%92%8C%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0/",
            "url": "https://miracleyxx.github.io/%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E5%92%8C%E7%A7%BB%E5%8A%A8%E6%9E%84%E9%80%A0/",
            "title": "右值引用和移动构造",
            "date_published": "2022-12-05T08:20:59.000Z",
            "content_html": "<h4 id=\"左值和右值的区别\"><a class=\"anchor\" href=\"#左值和右值的区别\">#</a> 左值和右值的区别</h4>\n<p>一个表达式是左值还是右值，取决于我们使用的是他的值还是他在内存中的位置（作为对象的身份）。一个表达式是左值还是右值，要根据实际咋语句中的含义来确定。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> bar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 将 foo 的值赋给 bar，保存在 bar 对应的内存中。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//foo 在这里作为表达式是右值；bar 在这里作为表达式是左值。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 但是 foo 作为对象，既可以充当左值又可以充当右值。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>bar <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>C++ 对象本身可以是一个表达式，所以这里有一个重要的原则，即：</p>\n<ul>\n<li>在大多数情况下，需要右值的地方可以用左值来替代</li>\n<li>需要左值的地方，一定不能用右值来替代</li>\n<li>左值存放在对象中，有持久的状态</li>\n<li>右值要么是字面常量，要么是在表达式求值过程中创建的临时变量，没有持久的状态。</li>\n</ul>\n<h4 id=\"stdmove\"><a class=\"anchor\" href=\"#stdmove\">#</a>  <code>std::move()</code></h4>\n<p>将左值转换为右值，触发移动语义。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//std::vector 和 std::string 的实际例子</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token operator\">::</span>string str <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传统方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用移动语义的 push_back 方法，避免拷贝，str1 会失去原有值，变成空字符串</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    vec<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//emplace_back 效果相同，str1 会失去原有值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    vec<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当然可以直接接右值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>std<span class=\"token operator\">::</span>vector方法定义</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value_type<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span> <span class=\"token punctuation\">(</span>value_type<span class=\"token operator\">&amp;&amp;</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">emplace_back</span> <span class=\"token punctuation\">(</span>Args<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"万能引用\"><a class=\"anchor\" href=\"#万能引用\">#</a> 万能引用</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>template<span class=\"token operator\">&lt;</span>typename T<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> temp <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发生类型推导的时候会表现为万能引用（如函数模版传参），其余情况为右值引用。</p>\n<h4 id=\"引用折叠\"><a class=\"anchor\" href=\"#引用折叠\">#</a> 引用折叠</h4>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>template<span class=\"token operator\">&lt;</span>typename T<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"左值\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>template<span class=\"token operator\">&lt;</span>typename T<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"右值\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>template<span class=\"token operator\">&lt;</span>typename T<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>func</code>  () 函数本身是一个万能引用，第一次接受了左值，调用 <code>fun</code>  () 的时候传入的也是左值；第二次接受了右值，在 <code>func</code>  () 函数中有临时变量 <code>temp</code> ，这是一个左值。</p>\n<p>结论：<strong>如果任一引用为左值引用，则结果为左值引用。否则（即两个都是右值引用），结果才是右值引用</strong></p>\n<h4 id=\"完美转发\"><a class=\"anchor\" href=\"#完美转发\">#</a> 完美转发</h4>\n<p>C++11 中通过 <code>std::forward()</code>  函数实现完美转发，实现了函数调用过程中变量类型的不变。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>template<span class=\"token operator\">&lt;</span>typename T<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>forward<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://miracleyxx.github.io/chrono%E6%97%B6%E9%92%9F%E5%BA%93/",
            "url": "https://miracleyxx.github.io/chrono%E6%97%B6%E9%92%9F%E5%BA%93/",
            "title": "chrono时钟库",
            "date_published": "2022-12-05T08:19:49.000Z",
            "content_html": "<h4 id=\"stdchrono时钟库\"><a class=\"anchor\" href=\"#stdchrono时钟库\">#</a>  <code>std::chrono</code>  时钟库</h4>\n<p><code>chrono</code>  是一个模版库，提供关于时间和日期的一些功能，主要包含三个模版。</p>\n<ul>\n<li><code>clock</code> ：时钟</li>\n<li><code>time_point</code> ：时间点</li>\n<li><code>duration</code> ：持续时间</li>\n</ul>\n<h4 id=\"clocks\"><a class=\"anchor\" href=\"#clocks\">#</a>  <code>clocks</code></h4>\n<p>时钟主要有三个，包括： <code>system_clock</code> ， <code>steady_clock</code> ， <code>high_resolution_clock</code> ，大多情况下使用 <code>system_clock</code> ：</p>\n<p><code>1.system_clock</code> ：系统时间，一般是 <code>unix</code>  时间，即从 1970 年 1 月 1 日到现在的时间间隔。</p>\n<p><code>2.steady_clock</code> ：单调时间，即每后一次调用都会比前一次调用的时间要晚，并不反应真实时间的时间。通过该时钟可以获取一段时间的的间隔，不随系统时间而改变。</p>\n<p><code>3.high_resolution_clock</code> ：高精度时间，用来测量细微间隔的时间。</p>\n<h5 id=\"system_clock\"><a class=\"anchor\" href=\"#system_clock\">#</a>  <code>system_clock</code></h5>\n<p><code>1.now</code> ：获取当前时间</p>\n<p><code>2.to_time_t</code> ：用来将系统时间转变为 <code>std::time_t</code>  类型</p>\n<p><code>3.from_time_t</code> ：用来将 <code>std::time_t</code>  转变为系统时间</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iomanip></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 获取当前时间 *</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">auto</span> time <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>system_clock<span class=\"token operator\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 装换为 time_t 类型，即为 unix 时间到现在的秒数 *</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">auto</span> tt <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>system_clock<span class=\"token operator\">::</span><span class=\"token class-name\">to_time_t</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//localtime 将 time_t 转换为本地时间格式的 tm，put_time 将时间转换为字符串格式化输出 *</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span><span class=\"token function\">put_time</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%d %H:%M:%S\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>steady_clock</code>  用法</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 获取时间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">auto</span> begin <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>steady_clock<span class=\"token operator\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">auto</span> end <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>steady_clock<span class=\"token operator\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 时间段</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> time <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> begin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"time = \"</span> <span class=\"token operator\">&lt;&lt;</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"duration持续时间\"><a class=\"anchor\" href=\"#duration持续时间\">#</a>  <code>duration</code>  持续时间</h4>\n<p>持续时间表示时间段，比如 <code>1s</code> 、 <code>1min</code>  等，定义如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Rep 表示单位的数量单位</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Period 表示单位</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>template<span class=\"token operator\">&lt;</span>class Rep<span class=\"token punctuation\">,</span>  class Period <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>ratio<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token number\">1</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">>></span> class duration<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>period</code>  表示时间的单位，比如天，秒等， <code>Rep</code>  表示容纳某个数量时间的单位，即存储类型，如 <code>int</code> ， <code>double</code>  等</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Num，表示分子</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Denom，表示分母</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>template<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span><span class=\"token class-name\">intmax_t</span> Num<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span><span class=\"token class-name\">intmax_t</span> Denom <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">></span> class ratio<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>举个简单点的例子， <code>Num</code>  为 1， <code>Denom</code>  也为 1 时，表示是 <code>1s</code> ，如果 <code>Num</code>  为 1， <code>Denom</code>  为 1000，那么相当于是 1/ <code>1000s</code> ，也即毫秒。如果 <code>Num</code>  为 60， <code>Denom</code>  为 1，那么表示 60 /  <code>1s</code> ，也即相当于 <code>1min</code> 。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>milliseconds <span class=\"token function\">mills</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> mills<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 类型强制转换可以用 duration_cast</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">auto</span> s <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>mills<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> mills<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>seconds <span class=\"token function\">secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> secs<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//duration 重载了 =/- 运算符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>secs <span class=\"token operator\">+</span> mills<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>secs <span class=\"token operator\">+</span> mills <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">10003</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">10006</span></pre></td></tr></table></figure><h5 id=\"time_point时间点\"><a class=\"anchor\" href=\"#time_point时间点\">#</a>  <code>time_point</code>  时间点</h5>\n<p>定义如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//clock, 时钟</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Duration, 时间段</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>template<span class=\"token operator\">&lt;</span>class Clock<span class=\"token punctuation\">,</span> class Duration <span class=\"token operator\">=</span> typename Clock<span class=\"token operator\">::</span>duration<span class=\"token operator\">></span> class time_point<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>主要方法</p>\n<ul>\n<li><code>time_since_epoch</code> ，获取以模板时钟的起始时间到现在的这个持续时间。</li>\n<li><code>time_point_cast</code> ，用来将时间点转换为基于同一个时钟，但不同类型持续时间的时间点。</li>\n<li>时间点也重载了 <code>+/-</code>  运算符，用来进行两个时间点之间的相加减。</li>\n</ul>\n<p>注意：分清楚 <code>Clock</code>  时钟， <code>duration</code>  持续时间， <code>time_point</code>  三个的关系这部分简单使用挺容易的。</p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://miracleyxx.github.io/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/",
            "url": "https://miracleyxx.github.io/inline%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/",
            "title": "inline内联函数",
            "date_published": "2022-12-05T08:09:32.000Z",
            "content_html": "<h3 id=\"内联函数介绍\"><a class=\"anchor\" href=\"#内联函数介绍\">#</a> 内联函数介绍</h3>\n<p>内联函数就是使用了 <code>inline</code>  修饰的函数，例如</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"内联函数的作用\"><a class=\"anchor\" href=\"#内联函数的作用\">#</a> 内联函数的作用</h3>\n<p>C++ 调用函数时，会执行一系列操作：</p>\n<ul>\n<li>将参数 push 到堆栈中</li>\n<li>将返回地址 push 到堆栈中</li>\n<li>准备返回值</li>\n<li>将所有 push 到堆栈中的都 pop 出来</li>\n</ul>\n<p><strong>非内联函数</strong>调用操作毫无疑问<strong>增加了延迟</strong>，有<strong>栈内存创建</strong>和<strong>释放</strong>的开销。而内联函数的作用就是将<strong>函数内容嵌入到函数调用</strong>的地方，但仍然保持着<strong>函数的独立性</strong>，函数还有自己的独立空间，缺点是<strong>增加空间消耗</strong>（以<strong>空间换时间</strong>）。</p>\n<p>直接调用函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用  <code>inline</code>  修饰：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">></span> b<span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面两种代码在执行过程中实际是一样的。</p>\n<h3 id=\"内联函数的使用\"><a class=\"anchor\" href=\"#内联函数的使用\">#</a> 内联函数的使用</h3>\n<p><strong>隐式内联</strong>：类的成员函数在，h 文件中定义，默认为内联函数。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class Demo <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">//demo.h</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>显式内联</strong>：关键字 <code>inline</code>  必须与函数定义体放在一起才能使函数成为内联，仅将 <code>inline</code>  放在函数声明前面不起任何作用。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>class Demo <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>显式内联</strong>时声明和定义尽量在同一个头文件中，否则必须在每个调用此函数的文件中实现一次，最好保证每个定义都是一样的，否则，将会引起未定义的行为，即是说，如果不是每个文件里的定义都一样，那么，编译器展开的是哪一个，那要看具体的编译器而定。所以，最好将内联函数<strong>定义放在头文件</strong>中.</p>\n<h3 id=\"内联函数和宏定义的区别\"><a class=\"anchor\" href=\"#内联函数和宏定义的区别\">#</a> 内联函数和宏定义的区别</h3>\n<p>宏是在代码处不加任何验证的简单替代，而内联函数是将代码直接插入调用处，而减少了普通函数调用时的资源消耗。宏不是函数，只是在编译前（编译预处理阶段）将程序中有关字符串替换成宏体。</p>\n<p><code>inline</code>  函数是函数，但在编译中不单独产生代码，而是将有关代码嵌入到调用处。</p>\n<p>内联函数要做<strong>参数类型检查</strong>，相比宏更加安全可靠，这是内联函数跟宏相比的优势。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">f</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> x<span class=\"token operator\">*</span>x</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">double</span> x<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这两段代码都会产生 warning，但第一个代码输出结果是错的，第二个输出结果的对的。这是为什么呢？因为宏定义不会做<strong>类型检查</strong>，f (x) 的结果是一个 double 型的，而我们用 <code>%d</code>  来打印，结果肯定是不对的；而第二个代码中，x 是 double 型，但函数 <code>f</code>  的参数类型是 <code>int</code>  型，因此会先进行类型转换后，再进行 <code>x*x</code>  的操作。</p>\n<h3 id=\"内联函数使用的注意事项\"><a class=\"anchor\" href=\"#内联函数使用的注意事项\">#</a> 内联函数使用的注意事项</h3>\n<p>以下情况不用内联（会产生大量的内存开销）：</p>\n<ul>\n<li>函数<strong>内容太多</strong></li>\n<li>函数包含<strong> for、while、switch</strong> 语句，即函数中包含<strong>递归</strong>、<strong>循环</strong>等。</li>\n</ul>\n<p>以下情况可以用内联（为了提高函数的执行速度）：</p>\n<ul>\n<li>函数内容<strong> 10 行以内</strong>且<strong>多次调用</strong>。</li>\n</ul>\n<h3 id=\"小知识\"><a class=\"anchor\" href=\"#小知识\">#</a> 小知识</h3>\n<p>函数<strong>内容太多</strong>，不管有没有加   <code>inline</code> ， 编译器都不会将其编译成内联函数，因为内联 <code>inline</code>  只是<strong>建议性</strong>的关键字，编译器并不一定会听你的，他肯定比你更了解编译后是什么样的，而所谓的内联也不单单是指 <code>inline</code>  这个关键字了，他本质上是一种<strong>编译器的优化方式</strong>。</p>\n",
            "tags": []
        },
        {
            "id": "https://miracleyxx.github.io/rtsp%E8%A7%A3%E6%9E%90/",
            "url": "https://miracleyxx.github.io/rtsp%E8%A7%A3%E6%9E%90/",
            "title": "rtsp解析",
            "date_published": "2022-11-28T06:24:56.000Z",
            "content_html": "<h3 id=\"rtsp-协议解析\"><a class=\"anchor\" href=\"#rtsp-协议解析\">#</a>  <code>RTSP</code>  协议解析</h3>\n<h4 id=\"rtsp协议介绍\"><a class=\"anchor\" href=\"#rtsp协议介绍\">#</a>  <code>RTSP</code>  协议介绍</h4>\n<ul>\n<li>\n<p><code>RTSP</code>  组合使用了可靠传输协议 <code>TCP</code>  和或高效传输协议 <code>UDP</code>  来串流内容给用户。它支持点播和直播服务。</p>\n</li>\n<li>\n<p><code>RTSP</code>  协议本身并不负责数据传输，** 通常 (非必须)** 是通过 <code>RTP</code>  配合 <code>RTCP</code>  完成数据流和控制命令的传输。</p>\n</li>\n</ul>\n<h4 id=\"rtsp协议方法\"><a class=\"anchor\" href=\"#rtsp协议方法\">#</a>  <code>RTSP</code>  协议方法</h4>\n<p><code>RTSP</code>  中并没有连接的概念，而是通过会话 <code>Session</code>  进行管理。每个会话有对应的会话 ID，会话中可能可能涉及一至多个流，会话生命周期中，客户端也可能切换连接（如 <code>TCP</code> ）来传递 <code>RTSP</code>  请求（ <code>request</code> ）。</p>\n<table>\n<thead>\n<tr>\n<th>method</th>\n<th>direction</th>\n<th>object</th>\n<th>requirement</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DESCRIBE</td>\n<td>C-&gt;S</td>\n<td>P,S</td>\n<td>recommended</td>\n</tr>\n<tr>\n<td>ANNOUNCE</td>\n<td>C-&gt;S, S-&gt;C</td>\n<td>P,S</td>\n<td>optional</td>\n</tr>\n<tr>\n<td>GET_PARAMETER</td>\n<td>C-&gt;S, S-&gt;C</td>\n<td>P,S</td>\n<td>optional</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>C-&gt;S, S-&gt;C</td>\n<td>P,S</td>\n<td>required(S-&gt;C:optional)</td>\n</tr>\n<tr>\n<td>PAUSE</td>\n<td>C-&gt;S</td>\n<td>P,S</td>\n<td>recommended</td>\n</tr>\n<tr>\n<td>PLAY</td>\n<td>C-&gt;S</td>\n<td>P,S</td>\n<td>required</td>\n</tr>\n<tr>\n<td>RECORD</td>\n<td>C-&gt;S</td>\n<td>P,S</td>\n<td>optional</td>\n</tr>\n<tr>\n<td>REDIRECT</td>\n<td>S-&gt;C</td>\n<td>P,S</td>\n<td>optional</td>\n</tr>\n<tr>\n<td>SETUP</td>\n<td>C-&gt;S</td>\n<td>S</td>\n<td>required</td>\n</tr>\n<tr>\n<td>SET_PARAMETER</td>\n<td>C-&gt;S,S-&gt;C</td>\n<td>P,S</td>\n<td>optional</td>\n</tr>\n<tr>\n<td>TEARDOWN</td>\n<td>C-&gt;S</td>\n<td>P,S</td>\n<td>required</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"rtsp.png\" alt=\"rtsp\"></p>\n<h5 id=\"rtsp必选方法\"><a class=\"anchor\" href=\"#rtsp必选方法\">#</a>  <code>RTSP</code>  必选方法</h5>\n<ul>\n<li>\n<details class=\"info\"><summary>OPTIONS</summary><div>\n<p>用于请求服务器中所<strong>支持</strong>的所有<strong>方法</strong></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">C</span><span class=\"token operator\">-></span><span class=\"token constant\">S</span>    <span class=\"token constant\">OPTIONS</span> rtsp<span class=\"token punctuation\">:</span><span class=\"token comment\">//video.foocorp.com:554 RTSP/1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        CSeq<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token constant\">S</span><span class=\"token operator\">-></span><span class=\"token constant\">C</span>    <span class=\"token constant\">RTSP</span><span class=\"token operator\">/</span><span class=\"token number\">1.0</span> <span class=\"token number\">200</span> <span class=\"token constant\">OK</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        CSeq<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">Public</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">DESCRIBE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SETUP</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">TEARDOWN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PLAY</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PAUSE</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">RECORD</span></pre></td></tr></table></figure></div></details>\n</li>\n<li>\n<details class=\"info\"><summary>DESCRIBE</summary><div>\n<p>用于请求 <code>URL</code>  指定对象的描述信息，通常描述信息使用 <code>SDP</code>  格式。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C<span class=\"token operator\">-</span><span class=\"token operator\">></span>S  DESCRIBE rtsp<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>video<span class=\"token punctuation\">.</span>foocorp<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">:</span><span class=\"token number\">554</span><span class=\"token operator\">/</span>streams<span class=\"token operator\">/</span>example<span class=\"token punctuation\">.</span>rm RTSP<span class=\"token operator\">/</span><span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      CSeq<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>S<span class=\"token operator\">-</span><span class=\"token operator\">></span>C  RTSP<span class=\"token operator\">/</span><span class=\"token number\">1.0</span> <span class=\"token number\">200</span> OK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      CSeq<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      Content<span class=\"token operator\">-</span>Type<span class=\"token punctuation\">:</span> application<span class=\"token operator\">/</span>sdp</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      Content<span class=\"token operator\">-</span>Length<span class=\"token punctuation\">:</span> <span class=\"token number\">210</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      m<span class=\"token operator\">=</span>video <span class=\"token number\">0</span> RTP<span class=\"token operator\">/</span>AVP <span class=\"token number\">96</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      a<span class=\"token operator\">=</span>control<span class=\"token punctuation\">:</span>streamid<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      a<span class=\"token operator\">=</span><span class=\"token keyword\">range</span><span class=\"token punctuation\">:</span>npt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">7.741000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      a<span class=\"token operator\">=</span>length<span class=\"token punctuation\">:</span>npt<span class=\"token operator\">=</span><span class=\"token number\">7.741000</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      a<span class=\"token operator\">=</span>rtpmap<span class=\"token punctuation\">:</span><span class=\"token number\">96</span> MP4V<span class=\"token operator\">-</span>ES<span class=\"token operator\">/</span><span class=\"token number\">5544</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      a<span class=\"token operator\">=</span>mimetype<span class=\"token punctuation\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span><span class=\"token string\">\"video/MP4V-ES\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      a<span class=\"token operator\">=</span>AvgBitRate<span class=\"token punctuation\">:</span>integer<span class=\"token punctuation\">;</span><span class=\"token number\">304018</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      a<span class=\"token operator\">=</span>StreamName<span class=\"token punctuation\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span><span class=\"token string\">\"hinted video track\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      m<span class=\"token operator\">=</span>audio <span class=\"token number\">0</span> RTP<span class=\"token operator\">/</span>AVP <span class=\"token number\">97</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      a<span class=\"token operator\">=</span>control<span class=\"token punctuation\">:</span>streamid<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      a<span class=\"token operator\">=</span><span class=\"token keyword\">range</span><span class=\"token punctuation\">:</span>npt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">7.712000</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      a<span class=\"token operator\">=</span>length<span class=\"token punctuation\">:</span>npt<span class=\"token operator\">=</span><span class=\"token number\">7.712000</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      a<span class=\"token operator\">=</span>rtpmap<span class=\"token punctuation\">:</span><span class=\"token number\">97</span> mpeg4<span class=\"token operator\">-</span>generic<span class=\"token operator\">/</span><span class=\"token number\">32000</span><span class=\"token operator\">/</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      a<span class=\"token operator\">=</span>mimetype<span class=\"token punctuation\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span><span class=\"token string\">\"audio/mpeg4-generic\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      a<span class=\"token operator\">=</span>AvgBitRate<span class=\"token punctuation\">:</span>integer<span class=\"token punctuation\">;</span><span class=\"token number\">65790</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      a<span class=\"token operator\">=</span>StreamName<span class=\"token punctuation\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span><span class=\"token string\">\"hinted audio track\"</span></pre></td></tr></table></figure><p><code>SDP</code>  协议格式<br>\n <code>SDP</code>  是一个用来描述多媒体会话的应用层控制协议，是一个基于文本的协议，用于会话建立过程中的媒体类型和编码方案的协商等。 <code>SDP</code>  描述由许多文本行组成，文本行的格式为 <code>&lt;类型&gt;=&lt;值&gt;</code> ， <code>&lt;类型&gt;</code>  是一个字母， <code>&lt;值&gt;</code>  是结构化的文本串，其格式依 <code>&lt;类型&gt;</code>  而定。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span> (协议版本)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>o=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>username</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>session</span> <span class=\"token attr-name\">id</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>network</span> <span class=\"token attr-name\">type</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span> <span class=\"token attr-name\">type</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">></span></span> (所有者/创建者和会话标识符)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>session</span> <span class=\"token attr-name\">name</span><span class=\"token punctuation\">></span></span>    (会话名称)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>i=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>session</span> <span class=\"token attr-name\">description</span><span class=\"token punctuation\">></span></span> (会话信息)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>u=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>URI</span><span class=\"token punctuation\">></span></span> (URI 描述)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>e=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>email</span> <span class=\"token attr-name\">address</span><span class=\"token punctuation\">></span></span> (Email 地址)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>phone</span> <span class=\"token attr-name\">number</span><span class=\"token punctuation\">></span></span> (电话号码)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>c=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>network</span> <span class=\"token attr-name\">type</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span> <span class=\"token attr-name\">type</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>connection</span> <span class=\"token attr-name\">address</span><span class=\"token punctuation\">></span></span> (连接信息)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>b=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modifier</span><span class=\"token punctuation\">></span></span>:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bandwidth-value</span><span class=\"token punctuation\">></span></span> (带宽信息)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>t=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>start</span> <span class=\"token attr-name\">time</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stop</span> <span class=\"token attr-name\">time</span><span class=\"token punctuation\">></span></span> (会话活动时间)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>r=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>repeat</span> <span class=\"token attr-name\">interval</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>active</span> <span class=\"token attr-name\">duration</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span> <span class=\"token attr-name\">of</span> <span class=\"token attr-name\">offsets</span> <span class=\"token attr-name\">from</span> <span class=\"token attr-name\">start-time</span><span class=\"token punctuation\">></span></span>(0或多次重复次数)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>z=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>adjustment</span> <span class=\"token attr-name\">time</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>offset</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>adjustment</span> <span class=\"token attr-name\">time</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>offset</span><span class=\"token punctuation\">></span></span> ....</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>k=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>method</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>k=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>method</span><span class=\"token punctuation\">></span></span>:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>encryption</span> <span class=\"token attr-name\">key</span><span class=\"token punctuation\">></span></span> (加密密钥)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>a=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attribute</span><span class=\"token punctuation\">></span></span> (0 个或多个会话属性行)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>a=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attribute</span><span class=\"token punctuation\">></span></span>:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>m=<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>media</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transport</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fmt</span> <span class=\"token attr-name\">list</span><span class=\"token punctuation\">></span></span> (媒体名称和传输地址)</pre></td></tr></table></figure></div></details>\n</li>\n<li>\n<details class=\"info\"><summary>SETUP</summary><div>\n<p>用于请求 <code>URL</code>  使用指定传输格式，必须在 <code>PLAY</code>  前发出。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">C</span><span class=\"token operator\">-></span><span class=\"token constant\">S</span>  <span class=\"token constant\">SETUP</span> rtsp<span class=\"token punctuation\">:</span><span class=\"token comment\">//video.foocorp.com:554/streams/example.rm RTSP/1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      CSeq<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      Transport<span class=\"token punctuation\">:</span> rtp<span class=\"token operator\">/</span>udp<span class=\"token punctuation\">;</span>unicast<span class=\"token punctuation\">;</span>client_port<span class=\"token operator\">=</span><span class=\"token number\">5067</span><span class=\"token operator\">-</span><span class=\"token number\">5068</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token constant\">S</span><span class=\"token operator\">-></span><span class=\"token constant\">C</span>  <span class=\"token constant\">RTSP</span><span class=\"token operator\">/</span><span class=\"token number\">1.0</span> <span class=\"token number\">200</span> <span class=\"token constant\">OK</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      CSeq<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      Session<span class=\"token punctuation\">:</span> <span class=\"token number\">12345678</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      Transport<span class=\"token punctuation\">:</span> rtp<span class=\"token operator\">/</span>udp<span class=\"token punctuation\">;</span>client_port<span class=\"token operator\">=</span><span class=\"token number\">5067</span><span class=\"token operator\">-</span><span class=\"token number\">5068</span><span class=\"token punctuation\">;</span>server_port<span class=\"token operator\">=</span><span class=\"token number\">6023</span><span class=\"token operator\">-</span><span class=\"token number\">6024</span></pre></td></tr></table></figure><p>客户端请求中，指明了用于接收 <code>RTP</code>  数据（音视频）的本地端口 5067，以及 <code>RTCP</code>  数据（元信息）的端口 5068。这里图示说明下 <code>RTSP</code> （554/8554）、 <code>RTP</code> 、 <code>RTCP</code>  端口关系。</p>\n<p><img data-src=\"setup.png\" alt=\"setup\"></p>\n<p>可以看到， <code>RTCP</code>  端口是基于 <code>RTP</code>  的，且始终为其端口值 + 1。服务器回复中，确认了客户端所请求的端口，并给出服务器端对应开辟的端口值 6023/6024。</p>\n</div></details>\n</li>\n<li>\n<details class=\"info\"><summary>PLAY</summary><div>\n<p>用于请求服务器使用 <code>SETUP</code>  中确认的机制开始传输数据，客户端不应在 <code>SETUP</code>  请求未被确认应答成功前发出 <code>PLAY</code>  请求。另外需要注意， <code>PLAY</code>  请求是需要排队的，其中可携带 <code>Range</code>  域以指明区间。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">C</span><span class=\"token operator\">-></span><span class=\"token constant\">S</span>  <span class=\"token constant\">PLAY</span> rtsp<span class=\"token punctuation\">:</span><span class=\"token comment\">//video.foocorp.com:554/streams/example.rm RTSP/1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      CSeq<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      Range<span class=\"token punctuation\">:</span> npt<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token operator\">-</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      Session<span class=\"token punctuation\">:</span> <span class=\"token number\">12345678</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token constant\">S</span><span class=\"token operator\">-></span><span class=\"token constant\">C</span>  <span class=\"token constant\">RTSP</span><span class=\"token operator\">/</span><span class=\"token number\">1.0</span> <span class=\"token number\">200</span> <span class=\"token constant\">OK</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      CSeq<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      Session<span class=\"token punctuation\">:</span> <span class=\"token number\">12345678</span></pre></td></tr></table></figure></div></details>\n</li>\n<li>\n<details class=\"info\"><summary>TEARDOWN</summary><div>\n<p>用于请求终止会话，将停止会话中所有相关流，并释放资源。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">C</span><span class=\"token operator\">-></span><span class=\"token constant\">S</span>  <span class=\"token constant\">TEARDOWN</span> rtsp<span class=\"token punctuation\">:</span><span class=\"token comment\">//video.foocorp.com:554/streams/example.rm RTSP/1.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      CSeq<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      Session<span class=\"token punctuation\">:</span> <span class=\"token number\">12345678</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token constant\">S</span><span class=\"token operator\">-></span><span class=\"token constant\">C</span>  <span class=\"token constant\">RTSP</span><span class=\"token operator\">/</span><span class=\"token number\">1.0</span> <span class=\"token number\">200</span> <span class=\"token constant\">OK</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      CSeq<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr></table></figure></div></details>\n</li>\n</ul>\n<ol>\n<li><code>RTSP</code>  可选方法</li>\n</ol>\n",
            "tags": [
                "rtsp"
            ]
        },
        {
            "id": "https://miracleyxx.github.io/%E6%9C%88%E4%BA%AE%E4%B8%8E%E5%85%AD%E4%BE%BF%E5%A3%AB/",
            "url": "https://miracleyxx.github.io/%E6%9C%88%E4%BA%AE%E4%B8%8E%E5%85%AD%E4%BE%BF%E5%A3%AB/",
            "title": "月亮与六便士",
            "date_published": "2022-11-25T01:11:49.000Z",
            "content_html": "<h3 id=\"月亮与六便士\"><a class=\"anchor\" href=\"#月亮与六便士\">#</a> 月亮与六便士</h3>\n<p>我们身边有许多人只能埋头拾起地上的六便士，偶尔望望月亮，而不能追逐月亮，无论选择如何，愿我们都能拾起地上的六便士，同时也能追逐自己心中的月亮，不在乎世俗的眼光，勇敢 ` 努力追逐自己的🌙。</p>\n<h3 id=\"hello-world\"><a class=\"anchor\" href=\"#hello-world\">#</a>  <code>hello world</code></h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 测试测试</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"陆续更新以前的笔记ing\"><a class=\"anchor\" href=\"#陆续更新以前的笔记ing\">#</a> 陆续更新以前的笔记 <code>ing...</code></h3>\n",
            "tags": [
                "随笔"
            ]
        }
    ]
}